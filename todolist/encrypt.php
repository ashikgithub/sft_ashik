<?php 	class session	{														private function getkey($id)		{			if(!isset($this->key_stmt)) 			{				$this->key_stmt = $this->db->prepare("SELECT session_key FROM sessions WHERE id = ? LIMIT 1");			}			$this->key_stmt->bind_param('s', $id);			$this->key_stmt->execute();			$this->key_stmt->store_result();			if($this->key_stmt->num_rows == 1) { 				$this->key_stmt->bind_result($key);				$this->key_stmt->fetch();				return $key;			} 			else 			{				$random_key = hash('sha512', uniqid(mt_rand(1, mt_getrandmax()), true));				return $random_key;			}		}		private function encrypt($data, $key)		{			$salt = 'cH!swe!retReGu7W6bEDRup7usuDUh9THeD2CHeGE*ewr4n39=E@rAsp7c-Ph@pH';			$key = substr(hash('sha256', $salt.$key.$salt), 0, 32);			$iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB);			$iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);			$encrypted = base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $key, $data, MCRYPT_MODE_ECB, $iv));			return $encrypted;		}		private function decrypt($data, $key) 		{			$salt = 'cH!swe!retReGu7W6bEDRup7usuDUh9THeD2CHeGE*ewr4n39=E@rAsp7c-Ph@pH';			$key = substr(hash('sha256', $salt.$key.$salt), 0, 32);			$iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB);			$iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);			$decrypted = mcrypt_decrypt(MCRYPT_RIJNDAEL_256, $key, base64_decode($data), MCRYPT_MODE_ECB, $iv);			$decrypted = rtrim($decrypted, "\0");			return $decrypted;		}	}?>